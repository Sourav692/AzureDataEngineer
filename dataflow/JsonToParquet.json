{
	"name": "JsonToParquet",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "InputJSON",
						"type": "DatasetReference"
					},
					"name": "SourceJSON"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputJSON",
						"type": "DatasetReference"
					},
					"name": "SinkJSON"
				},
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "SinkParquet"
				}
			],
			"transformations": [
				{
					"name": "SelectDataColumn"
				},
				{
					"name": "FlattenData"
				},
				{
					"name": "SelectEmployeeIntroducer"
				}
			],
			"scriptLines": [
				"source(output(",
				"          are_more as boolean,",
				"          data as (CompanyMd5 as string, CompanyNameText as string, BestUrlText as string, WeKnowCompany as string, AnchorEmployeeBestKnowerP2PScore as integer, AnchorEmployeePersonMd5 as string, AnchorEmployeeNameText as string, AnchorJobCompanyName as string, AnchorTitleText as string, AnchorEmployeeSeniorityLevel as string, BestKnowerUserKeyMd5 as string, BestKnowerNameText as string, WeKnowAnchorEmployeeScore as integer, Score as integer, Identifiers as (IdProperty as string, Aliases as (Md5 as string, Text as string, Type as string)[])[], Employees as (data as (CompanyMd5 as string, PersonNameText as string, PersonMd5 as string, TitleText as string, CorpLevelCompanyName as string, JobCompanyName as string, SeniorityLevel as string, JobCurrentAsOf as string, InfluenceScore as integer, KnowerUserKeyMd5 as string, KnowerNameText as string, UserKnowsPersonScore as integer, ContactName as string, ContactBestJobCorpLevelCompanyName as string, ContactBestJobCompanyMd5 as string, ContactBestJobMatchedCompanyName as string, ContactBestJobTitleText as string, ContactBestJobCurrentAsOf as string, ContactBestEmail as string, ContactBestEmailAsOf as string, WeKnowPersonScore as integer)[], total_item_count as integer, page_start as integer, page_end as integer, are_more as boolean), Introducers as (data as (KnoweeCompanyMd5 as string, IntroducerScore as integer, UserKeyMd5 as string, IntroducerPersonKeyMd5 as string, IntroducerName as string, IntroducerBestEmailAddressText as string)[], total_item_count as integer, page_start as integer, page_end as integer, are_more as boolean))[],",
				"          page_start as integer,",
				"          page_end as integer,",
				"          total_item_count as integer,",
				"          query as (command as string),",
				"          context as (queryGuid as string, user as string, teamName as string, teamNumber as integer, scope as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'singleDocument') ~> SourceJSON",
				"SourceJSON select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDataColumn",
				"SelectDataColumn foldDown(unroll(data, data),",
				"     mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenData",
				"FlattenData select(mapColumn(",
				"          AnchorEmployeeBestKnowerP2PScoreata = data.AnchorEmployeeBestKnowerP2PScore,",
				"          AnchorEmployeeNameText = data.AnchorEmployeeNameText,",
				"          AnchorEmployeePersonMd5 = data.AnchorEmployeePersonMd5,",
				"          AnchorEmployeeSeniorityLevel = data.AnchorEmployeeSeniorityLevel,",
				"          AnchorJobCompanyName = data.AnchorJobCompanyName,",
				"          AnchorTitleText = data.AnchorTitleText,",
				"          BestKnowerNameText = data.BestKnowerNameText,",
				"          BestKnowerUserKeyMd5 = data.BestKnowerUserKeyMd5,",
				"          BestUrlText = data.BestUrlText,",
				"          CompanyMd5 = data.CompanyMd5,",
				"          CompanyNameText = data.CompanyNameText,",
				"          Score = data.Score,",
				"          WeKnowAnchorEmployeeScore = data.WeKnowAnchorEmployeeScore,",
				"          WeKnowCompany = data.WeKnowCompany,",
				"          Employees = data.Employees,",
				"          Introducers = data.Introducers",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectEmployeeIntroducer",
				"SelectEmployeeIntroducer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkJSON",
				"SelectEmployeeIntroducer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkParquet"
			]
		}
	}
}